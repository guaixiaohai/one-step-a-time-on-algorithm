题目要求：
  给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

  你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

  示例:

  给定 1->2->3->4, 你应该返回 2->1->4->3.
  
  
求解方法：
  python解法1：（2019/10/15）
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
    
        # pre=ListNode(0)   （和下一个语句实现相同的功能）
        pre=self
        pre.next=head        #（定义前驱节点）
        temp=pre
        while(temp.next!=None and temp.next.next!=None):
            first=temp.next.next     #交换前数对中的后一个数，交换后为第一个数
            second=temp.next         #交换前数对的前一个数，交换后为第二个数
            temp.next=first          #三者交换，注意顺序
            second.next=first.next
            first.next=second
            temp=second
        return pre.next  
   python方法1 执行结果：
   执行用时 :44 ms, 在所有 python3 提交中击败了82.53%的用户
   内存消耗 :13.8 MB, 在所有 python3 提交中击败了5.93%的用户
   
   原因分析：（待续）：
   
   
   
题目来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs
