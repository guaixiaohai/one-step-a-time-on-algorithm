题目：
给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]






python方法1：
 #BFS:广度优先搜索，每个元素访问且仅访问一次
 class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if (not root):
            return []  #root如果是空指针，则返回空。
        result = []    #存储结果的数组变量
        queue = collections.deque() #双端队列
        queue.append(root)   #先把根节点（树）放入队列
        #visited.add(start)
        #广度优先算法的写法：
        
        #visited = set(root)   #判断节点是否已经访问过
        
        while queue:        
            level_size = len(queue)  
            current_level = []       
            
            # 队列增加元素在最后增加，出队pop出最后一个，出队popleft则出最前元素
            for _ in range(level_size):  
                node = queue.popleft()    
                current_level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
                    
            
            result.append(current_level)
        return result
        
执行结果：       
执行用时 :52 ms, 在所有 python3 提交中击败了67.19%的用户
内存消耗 :13.8 MB, 在所有 python3 提交中击败了12.60%的用户

原因分析：（待续）

python方法2：BFS
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
  #DFS:
        if not root:
            return []
        self.result = []
        self._dfs(root,0)
        return self.result
    def _dfs(self,node,level):
        if not node:
            return
             #给每个result子元素加一个中括号
        if len(self.result) < level + 1:
            self.result.append([])
            
        self.result[level].append(node.val)
        
        self._dfs(node.left,level+1)
        self._dfs(node.right,level+1)

执行结果：
执行用时 :48 ms, 在所有 python3 提交中击败了82.30%的用户
内存消耗 :14.4 MB, 在所有 python3 提交中击败了5.20%的用户

原因分析：（待续）




来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal

