给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]

示例 1:

输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
输出: 6 
解释: 节点 2 和节点 8 的最近公共祖先是 6。
示例 2:

输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
输出: 2
解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。

python解法1：（20191023）

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if p.val<root.val>q.val:               #如果p/q都在root节点的左侧，就从左树中寻找最小根节点
            return self.lowestCommonAncestor(root.left,p,q)
        if p.val>root.val<q.val:                #如果p/q都在root节点的右侧，就从右树中寻找最小根节点
            return self.lowestCommonAncestor(root.right,p,q)
        return root

执行用时 :100 ms, 在所有 python3 提交中击败了79.16%的用户
内存消耗 :17.8 MB, 在所有 python3 提交中击败了5.48%的用户

原因分析：（待续）

python解法2：（20191023）
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if(root == None or root == p or root == q):
            return root
        left = self.lowestCommonAncestor(root.left,p,q)
        right = self.lowestCommonAncestor(root.right,p,q)
        if(left == None):
            return right
        if(right == None):
            return left
        return root
        
执行用时 :164 ms, 在所有 python3 提交中击败了16.16%的用户
内存消耗 :18 MB, 在所有 python3 提交中击败了5.48%的用户

原因分析：(待续)



















题目来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree
